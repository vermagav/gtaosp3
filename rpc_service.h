/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rpc_service_H
#define rpc_service_H

#include <thrift/TDispatchProcessor.h>
#include "rpc_proxy_types.h"

namespace rpc {

class rpc_serviceIf {
 public:
  virtual ~rpc_serviceIf() {}
  virtual void fetch(std::string& _return, const std::string& s) = 0;
  virtual void restart_debug(const int32_t cache_policy, const int32_t cache_size) = 0;
  virtual void dump_stats(const std::string& batch_type) = 0;
};

class rpc_serviceIfFactory {
 public:
  typedef rpc_serviceIf Handler;

  virtual ~rpc_serviceIfFactory() {}

  virtual rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(rpc_serviceIf* /* handler */) = 0;
};

class rpc_serviceIfSingletonFactory : virtual public rpc_serviceIfFactory {
 public:
  rpc_serviceIfSingletonFactory(const boost::shared_ptr<rpc_serviceIf>& iface) : iface_(iface) {}
  virtual ~rpc_serviceIfSingletonFactory() {}

  virtual rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(rpc_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<rpc_serviceIf> iface_;
};

class rpc_serviceNull : virtual public rpc_serviceIf {
 public:
  virtual ~rpc_serviceNull() {}
  void fetch(std::string& /* _return */, const std::string& /* s */) {
    return;
  }
  void restart_debug(const int32_t /* cache_policy */, const int32_t /* cache_size */) {
    return;
  }
  void dump_stats(const std::string& /* batch_type */) {
    return;
  }
};

typedef struct _rpc_service_fetch_args__isset {
  _rpc_service_fetch_args__isset() : s(false) {}
  bool s;
} _rpc_service_fetch_args__isset;

class rpc_service_fetch_args {
 public:

  rpc_service_fetch_args() : s() {
  }

  virtual ~rpc_service_fetch_args() throw() {}

  std::string s;

  _rpc_service_fetch_args__isset __isset;

  void __set_s(const std::string& val) {
    s = val;
  }

  bool operator == (const rpc_service_fetch_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const rpc_service_fetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_fetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class rpc_service_fetch_pargs {
 public:


  virtual ~rpc_service_fetch_pargs() throw() {}

  const std::string* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _rpc_service_fetch_result__isset {
  _rpc_service_fetch_result__isset() : success(false) {}
  bool success;
} _rpc_service_fetch_result__isset;

class rpc_service_fetch_result {
 public:

  rpc_service_fetch_result() : success() {
  }

  virtual ~rpc_service_fetch_result() throw() {}

  std::string success;

  _rpc_service_fetch_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const rpc_service_fetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const rpc_service_fetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_fetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _rpc_service_fetch_presult__isset {
  _rpc_service_fetch_presult__isset() : success(false) {}
  bool success;
} _rpc_service_fetch_presult__isset;

class rpc_service_fetch_presult {
 public:


  virtual ~rpc_service_fetch_presult() throw() {}

  std::string* success;

  _rpc_service_fetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _rpc_service_restart_debug_args__isset {
  _rpc_service_restart_debug_args__isset() : cache_policy(false), cache_size(false) {}
  bool cache_policy;
  bool cache_size;
} _rpc_service_restart_debug_args__isset;

class rpc_service_restart_debug_args {
 public:

  rpc_service_restart_debug_args() : cache_policy(0), cache_size(0) {
  }

  virtual ~rpc_service_restart_debug_args() throw() {}

  int32_t cache_policy;
  int32_t cache_size;

  _rpc_service_restart_debug_args__isset __isset;

  void __set_cache_policy(const int32_t val) {
    cache_policy = val;
  }

  void __set_cache_size(const int32_t val) {
    cache_size = val;
  }

  bool operator == (const rpc_service_restart_debug_args & rhs) const
  {
    if (!(cache_policy == rhs.cache_policy))
      return false;
    if (!(cache_size == rhs.cache_size))
      return false;
    return true;
  }
  bool operator != (const rpc_service_restart_debug_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_restart_debug_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class rpc_service_restart_debug_pargs {
 public:


  virtual ~rpc_service_restart_debug_pargs() throw() {}

  const int32_t* cache_policy;
  const int32_t* cache_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class rpc_service_restart_debug_result {
 public:

  rpc_service_restart_debug_result() {
  }

  virtual ~rpc_service_restart_debug_result() throw() {}


  bool operator == (const rpc_service_restart_debug_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const rpc_service_restart_debug_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_restart_debug_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class rpc_service_restart_debug_presult {
 public:


  virtual ~rpc_service_restart_debug_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _rpc_service_dump_stats_args__isset {
  _rpc_service_dump_stats_args__isset() : batch_type(false) {}
  bool batch_type;
} _rpc_service_dump_stats_args__isset;

class rpc_service_dump_stats_args {
 public:

  rpc_service_dump_stats_args() : batch_type() {
  }

  virtual ~rpc_service_dump_stats_args() throw() {}

  std::string batch_type;

  _rpc_service_dump_stats_args__isset __isset;

  void __set_batch_type(const std::string& val) {
    batch_type = val;
  }

  bool operator == (const rpc_service_dump_stats_args & rhs) const
  {
    if (!(batch_type == rhs.batch_type))
      return false;
    return true;
  }
  bool operator != (const rpc_service_dump_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_dump_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class rpc_service_dump_stats_pargs {
 public:


  virtual ~rpc_service_dump_stats_pargs() throw() {}

  const std::string* batch_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class rpc_service_dump_stats_result {
 public:

  rpc_service_dump_stats_result() {
  }

  virtual ~rpc_service_dump_stats_result() throw() {}


  bool operator == (const rpc_service_dump_stats_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const rpc_service_dump_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_service_dump_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class rpc_service_dump_stats_presult {
 public:


  virtual ~rpc_service_dump_stats_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class rpc_serviceClient : virtual public rpc_serviceIf {
 public:
  rpc_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  rpc_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetch(std::string& _return, const std::string& s);
  void send_fetch(const std::string& s);
  void recv_fetch(std::string& _return);
  void restart_debug(const int32_t cache_policy, const int32_t cache_size);
  void send_restart_debug(const int32_t cache_policy, const int32_t cache_size);
  void recv_restart_debug();
  void dump_stats(const std::string& batch_type);
  void send_dump_stats(const std::string& batch_type);
  void recv_dump_stats();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class rpc_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<rpc_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (rpc_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_fetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restart_debug(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dump_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  rpc_serviceProcessor(boost::shared_ptr<rpc_serviceIf> iface) :
    iface_(iface) {
    processMap_["fetch"] = &rpc_serviceProcessor::process_fetch;
    processMap_["restart_debug"] = &rpc_serviceProcessor::process_restart_debug;
    processMap_["dump_stats"] = &rpc_serviceProcessor::process_dump_stats;
  }

  virtual ~rpc_serviceProcessor() {}
};

class rpc_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  rpc_serviceProcessorFactory(const ::boost::shared_ptr< rpc_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< rpc_serviceIfFactory > handlerFactory_;
};

class rpc_serviceMultiface : virtual public rpc_serviceIf {
 public:
  rpc_serviceMultiface(std::vector<boost::shared_ptr<rpc_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~rpc_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<rpc_serviceIf> > ifaces_;
  rpc_serviceMultiface() {}
  void add(boost::shared_ptr<rpc_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void fetch(std::string& _return, const std::string& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch(_return, s);
    }
    ifaces_[i]->fetch(_return, s);
    return;
  }

  void restart_debug(const int32_t cache_policy, const int32_t cache_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->restart_debug(cache_policy, cache_size);
    }
    ifaces_[i]->restart_debug(cache_policy, cache_size);
  }

  void dump_stats(const std::string& batch_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dump_stats(batch_type);
    }
    ifaces_[i]->dump_stats(batch_type);
  }

};

} // namespace

#endif
